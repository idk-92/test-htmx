// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: leaderboard.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLeaderboardValue = `-- name: CreateLeaderboardValue :exec
INSERT INTO
  leaderboard (name, score)
VALUES
  ($1, $2)
`

type CreateLeaderboardValueParams struct {
	Name  pgtype.Text
	Score pgtype.Int4
}

func (q *Queries) CreateLeaderboardValue(ctx context.Context, arg CreateLeaderboardValueParams) error {
	_, err := q.db.Exec(ctx, createLeaderboardValue, arg.Name, arg.Score)
	return err
}

const getLeaderboardValues = `-- name: GetLeaderboardValues :many
SELECT
  name,
  score
FROM
  leaderboard
ORDER BY
  score DESC
LIMIT
  10
`

type GetLeaderboardValuesRow struct {
	Name  pgtype.Text
	Score pgtype.Int4
}

func (q *Queries) GetLeaderboardValues(ctx context.Context) ([]GetLeaderboardValuesRow, error) {
	rows, err := q.db.Query(ctx, getLeaderboardValues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLeaderboardValuesRow
	for rows.Next() {
		var i GetLeaderboardValuesRow
		if err := rows.Scan(&i.Name, &i.Score); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
